//The search of a tree
//Based on 0-1 backpack problem
//全探索
//0-1ナップサック問題
//w个各自重量；n个物品；W最大重量
//Recursive solution
//枝刈りなし：O(2^n) 
//O(sizeof(w)*sizeof(v))
int w[INT_MAX];
int v[INT_MAX];
int dp[INT_MAX][INT_MAX];

int res(int i, int j){
  //i items remaining j weights remaining
  //Records the parts that ha already been explored
	if(dp[i][j]>=0) return dp[i][j];
	int r;
  //No items remaining
	if(i == n) r = 0;
  //The current item overweights
	else if(j < w[i]) r = res(i+1, j);
  //Calculate the maximum of taking the current or not
	else r= max(res(i+1,j),v[i]+res(i+1, j-w[i]));
	return dp[i][j] = r;
}
//漸化式：dp[n][j] = 0;
      dp[i][j] = max（dp[i+1][j]，v[i]+dp[i+i][j-w[i]])
//再帰関数を書かなくて、二重ループで解答できる
vector<vector<int>> dp(int i, int j){
	vector<vector<int>> dp;
	for(int n=i-1;n>=0;n--){//从满状态开始，还剩i个
		for(int m=0;m<j;m++){
			if(j<w[n]) dp[n][m] = dp[n+1][m];
			else dp[n][m] = max(dp[n+1][m],v[n]+dp[n+1][m-w[i]]);
		}
	}
	return dp;
}
